Title         : `MyStyle.mdk`

Affiliation   : The University of Tokyo, Department of Indian Philosophy and Buddhist Studies

<!--
Here is the bad character: 
!-->

<!-- BEGIN:Style -->

BibTeX        : False
Logo          : False
Doc class     : [10pt]article
Package       : [a4paper]geometry
Package       : [all,defaultlines=3]nowidow
Package       : xltxtra, xunicode
Package       : fontspec
Package       : [AutoFallBack=true]xeCJK
Package       : [normalem]ulem
Package       : hyperref
Package       : [nooverlap,CJK]ruby

<!--Package       : pxrubrica
try{pxrubrica} a newish ruby package.
Ok, I tried it. it didn't work. seems to not be compatible fully with XeLetex -->


<!--- Font Options for Madoko and Latex: -->

main_font  : Linux Libertine O

<!--
Linux Libertine O, JUnicode, Iowan Old Style
!-->

CJK_main_Font : MS Mincho
CJK_sans_font : Noto Sans CJK JP Regular

<!-- not tested
Hiragino Mincho Pro, HanaMinA Regular, Iowan Old Style
Tested: MS Gothic; MS PMincho but doesn't display in preview for some reason
!-->

Japanese_Font : MS Mincho
CJKFallBack_Font : HanaMinA

Tex Header    : \defaultfontfeatures{Mapping=tex-text}
Tex Header    : \setmainfont {&main_font;}
Tex Header    : \setCJKmainfont [AutoFakeBold=false,AutoFakeSlant=false]{&cjk_main_font;}
Tex Header    : \setCJKsansfont [AutoFakeBold=false,AutoFakeSlant=false]{&cjk_sans_font;}
Tex Header    : \setCJKfallbackfamilyfont{rm}{&CJKFallBack_Font;}
Tex Header    : \setCJKfallbackfamilyfont{\CJKrmdefault}{&CJKFallBack_Font;}

Tex Header    : \newCJKfontfamily{\jpfont}{&Japanese_Font;}

Tex Header    : \setCJKfallbackfamilyfont{jpfont}{&CJKFallBack_Font;}


<!--
Package       : [pagewise] lineno 
Tex Header    : \linenumbers
Tex Header    : \modulolinenumbers[5]
Tex Header    : \renewcommand\linenumberfont{\textrm{\small}}
Tex Header    : \setlength\linenumbersep{20pt}
!-->


leftheadertext : &date;
rightheadertext: Tom Newhall

package       : fancyhdr

headeron      : True
footeron      : True
Draft         : False
draft_text    : \colorbox{red}{Draft-not for citation}



@if headeron  { 
Tex Header    :	\setlength{\headheight}{17 pt}
Tex Header    : \pagestyle{fancy}
Tex Header    :	\lhead{\footnotesize &leftheadertext;}
Tex Header    :	\rhead{\footnotesize &rightheadertext;} 
                }

@if Draft  {  Tex Header    : \chead{&draft_text;}  }

@if footeron  { Tex Header    : \cfoot{Newhall \thepage}  }

    <!--- Useful Symbols and additional entities -->

default_highlight_color: yellow

genbun        : [原▶︎]{margin-left:-2em; padding: 2px; border:"solid black 1px";}
kundoku       : [訓▶︎]{margin-left:-2em; padding: 2px; border:"solid black 1px";}
honyaku       : [訳▶︎]{margin-left:-2em; padding: 2px; border:"solid black 1px";}

excl          : !
ditto         : 〃
approx        : ≒
about         : ≈
notequal      : ≠

verylightsalmon : hsl(15,80%,85%)


verse_text_color        : darkblue
verse_background_color  : lightblue

    <!-- ----------------------------------- !-->
    <!-- Begineth the furigana/rubies module !-->
    <!-- ----------------------------------- !-->

<!--- The rubies unit basically works like this:
 1. Find a string of kanji followed by a string of rubies
  - More specifically, find string of one or more kanji with some hiragana (+spacing delimiters) inside of parentheses
  - the characters that are defined kanji are defined by the `base_kanji_range` variable
  - strings of kanji can be split up by a space. For instance consider the strings `天台智顗(ちぎ)` and `天台 智顗(ちぎ)`. The first will put the rubies `ちぎ` over the whole string `天台智顗` while the latter will only put it over the characters `智顗`. If only one space is left between such strings of kanji, the two strings will appear concatenated (i.e. without a space) in the final output. `
  - Characters that are defined as parentheses are defined specifically by `ruby_opening_delimiters` and `ruby_closing_delimiters`. By changing these variables, you can, for example, use different characters and different brackets such as `{` and `}` for typing furigana.
  - Characters that can be used for rubies are defined by `&furigana_range;`. In this first step characters that are defined as `furigana_spacers` and `okurigana_spacers` are also grabbed into the "string of rubies"
  - This string of kanji + furigana is "normalized", that is to say, put into the form of [<kanji>(<furigana>)]{.rubies} and labeled with `.rubies` for further processing.
  - This means that any string, even if the contain characters that are normally included in the definition of furigana or kanji, can be made into rubies with by putting it in the above mentioned format. I.e. you would normally not be able to type `猫(neko)` and have it automatically produce rubies, but if you typed `[猫(neko)]{.rubies}` it should print `neko` above `猫`. Similarly `[Cat(猫)]{.rubies}` should print `猫` above `Cat`.
 2. If the string of rubies has okurigana or furigana delimiters in them, break the strings up into smaller strings
  2.1 If the string of rubies has an Okurigana spacer in it, everything after this spacer should be put above a blank space, and everything before it should be put above the kanji
    - Characters used for okurigana spacers are defined by `okurigana_spacers`. By default this is a bar |, but you can change that or add to it if you like.
    - so for instance the string of rubies for 煩悩(ぼんのう|を) would be split up into `ぼんのう` and `を` with the `を` appearing over a blank space after `煩悩`.
    - Technically, the string of rubies before the okurigana spacer are not directly "put above the kanji" but are put into the normalized ruby format, and labeled as `.rubies`. 
    - so technically `煩悩(ぼんのう|を)` becomes `[煩悩(ぼんのう)]{.rubies}[[&emsp;][を]{.ruby-text}]{.base-kanji}`
  2.2 If the string of rubies has one or more furigana spacers in it, put everything after the spacer above the last character in the string of kanji, and everthing before the spacer above the rest of the kanji.
    - Once again, furigana spacer are defined by `furigana_spacers`. This defaults to the middle dot, easily typed with the (mac) japanese IME, or a space, or a hyphen
    - For instance, the string of rubies for `諸煩悩(しょ・ぼん・のう)` is split into `しょ・ぼん` and `のう` while the string of kanji is broken into `諸煩` and `悩`, with `のう` appearing over the character `悩`.
    - Technically, all the characters in the kanji string except the last one, plus all the rubies before the delimiter are put in a normalized format and labeled with the `.rubies` to be sent to the `.rubies` unit, while the last character of the kanji string and the characters after the delimiter are rendered.
    - Specifically,`諸煩悩(しょ・ぼん・のう)` gets transformed into `[諸煩(しょ・ぼん)]{.rubies}[悩[のう]{.ruby-text}]{.base-kanji}
    - Notice that this is a recursive operation. After the ` 悩` and `のう` have been parsed out, the same operation happens with `諸煩` and `しょ・ぼん` until there are no strings with furigana delimiters left. Essentially, this is how the correct furigana is put over the correct kanji. 
    - Note that this assumes that the string of furigana after the last furigana delimiter is associated with the last character in the string of kanji.
    - That is to say that, for example typing 諸煩悩(しょ・ぼんのう) would be parsed as 諸煩(しょ) and 悩(ぼんのう) which is incorrect. The way to avoid this would be to type something like `諸煩悩(しょ・ぼん・のう)`, as above or `諸(しょ)煩悩(ぼん・のう)`
    - Because the the space character `(`\s`) and hyphens are included in `furigana_spacers` you could also type the above as 諸煩悩(しょ ぼん のう) or 諸煩悩(しょ-ぼん-のう), if you prefer.
  3. Once all the strings of kanji and strings of rubies that were labeled `.rubies` have been split up into smaller "normalized" strings of kanji and strings of rubies, and there are no more strings of rubies that have furigana or okurigana delimiters left, then label the string of kanji as `.base-kanji` and the strings of ruby text as `.ruby-text`
    - its actually a little more complex than that, as they have to be in a particular format, but this is actually the most fundamental thing this whole unit does.
    - from the example above `煩悩（ぼんのう）` first becomes `[煩悩(ぼんのう)]{.rubies}` (step 1) which then becomes [煩悩[ぼんのう]{.ruby-text}]{.base-kanji}
  4. These tags are then converted to appropriate HTML/CSS or LaTeX, and rendered. 
  - In the HTML/CSS version, the whole string of base kanji+ruby-text is surrounded by <ruby> tags, while the `ruby-text` tagged with the <rt> (short for ruby-text)tag.
    - so `[煩悩[ぼんのう]{.ruby-text}]{.base-kanji}` becomes `<ruby>煩悩<rt>ぼんのう<rt></ruby>`
  - In the LaTeX version, the command `\ruby` is added, with the base-kanji text and ruby-text surrounded by brackets `{}`, respectively.
    - so `[煩悩[ぼんのう]{.ruby-text}]{.base-kanji}` becomes `\ruby{煩悩}{ぼんのう}`
    - This requires the `ruby` package, which is automatically loaded with this style file. 
    - Or, to make a long story short, this whole thing does this: 
    (simple example):
     0. 煩悩（ぼんのう）
     1. [煩悩（ぼんのう）]{.rubies}
     2. <no delimiters in this example, so skip step 2>
     3. [[煩悩[ぼんのう]{.ruby-text}]{.base-kanji}
     4a. (html) <ruby>煩悩<rt>ぼんのう<rt></ruby>
     4b. (latex) \ruby{煩悩}{ぼんのう}
     
  (complex example, with delimiters and a non-ruby kanji):
    0. 此 諸煩悩（しょ・ぼん・のう）
    1. 此[諸煩悩（しょ・ぼん・のう）]{.rubies}
    2a. 此[諸煩（しょ・ぼん）]{.rubies}[悩[のう]{.ruby-text}]{.base-kanji}
    2b. 此[諸(しょ)]{.rubies}[[煩][ぼん]{.ruby-text}]{.base-kanji}[悩[のう]{.ruby-text}]{.base-kanji}
    3. 此[[諸[しょ]{.ruby-text}]{.base-kanji}[[煩][ぼん]{.ruby-text}]{.base-kanji}[悩[のう]{.ruby-text}]{.base-kanji}
    4a. (HTML) 此<ruby>諸<rt>しょ</rt></ruby><ruby>煩<rt>ぼん</rt></ruby><ruby><rt>悩<rt>のう</rt></ruby>
    4b. (LaTeX) 此\ruby{諸}{しょ}\ruby{煩}{ぼん}\ruby{悩}{のう}
    The end.
    --->

         <!-- General Options !-->

rubysep       : -0.1em
rubysize      : 0.4

Tex Header    : \renewcommand{\rubysep}{&rubysep;}
Tex Header    : \renewcommand{\rubysize}{&rubysize;}

base_kanji_range: \u3400-\u9FFF々㆑㆒㆓㆔㆖㆗㆘

 <!--Set the regex range that the ruby function will detect as the base character for the rubies. Default is `\u4E00-\u9FFF`, the Unicode range for Kanji, though you could theoretically use this function for other types of characters.!-->

furigana_range:\u3040-\u30FFa-zA-ZÀ-㏿

<!--Set the regex range that the ruby function will detect as 'ruby' (furigana) characters. The default is `\u3040-\u30FF`, the Unicode range that includes Hiragana and Katakana, though you may want to add functionality for alphabetical characters by adding ` a-zA-Z` or numbers `0-9`, or possibly even certain kanji.!-->

furigana_spacers: \s,・\-‐

<!-- \u3000 should be the IDEOGRAPHIC SPACE　!-->

<!--Set the regex range that the ruby function will detect to separate blocks of furigana. The default is `|` (vertical line/pipe) which has to be escaped as `\|`. You may want to add other separators such as the middle dot `・`, which may be easier to type when typing with a Japanese IME.!-->

okurigana_spacers:｜|

<!--Set the regex range that the ruby function will detect to separate furigana from okurigana characters. The default is `|` (vertical line/pipe) which has to be escaped as `\|`. You may want to add other separators such as the middle dot `・`, which may be easier to type when typing with a Japanese IME.! For whatever reason the japanese full-width pipe character doesn't seem to be working. -->

ruby_opening_delimiters: （\(
ruby_closing_delimiters: \)）


<!-- Supposed to allow you to make rubies unselectable in the html, but may not work in chrome: -->

rubies_selectable: True

<!-- The main "ruby grabber" for the whole document. This basically grabs two stringgs. First, it grabs a string of at one or more characters in the "base kanji range." If a space  separates two kanji characters, these are treated as separate groups. This string of kanji is followed by a string of one "opening delimiter" character followed by at least one character in the "furigana range," optional "furigana spacer"s or "okurigana spacer"s, and a single "closing delimiter character". and then renders this as strings separated by parentheses `()` that go to the `.rubies` unit. This is done so that you can also use any strings of the form [XX(YYY)]{.rubies} to create rubies, while the default only matches kanji at the base and hiragana for the ruby characters!-->

.madoko { replace :  "/(([&base_kanji_range;]+)\s)?([&base_kanji_range;]+?)\
                      [&ruby_opening_delimiters;]([&furigana_range;&furigana_spacers;&okurigana_spacers;]+?)[&ruby_closing_delimiters;]/\
                      \2[\3(\4)]{.rubies}/g"  ; }

<!-- Here, text from the above is parsed into either a string with furigana or okurigana spacers, or one without those spacers. The one without is sent to `.ruby-text` and `.base-kanji`, the furigana rendering styles !-->

<!-- The case with either furigana spaces or okurigana spacers: !-->

.rubies { replace : "/(.+?)\((.+?[&furigana_spacers;&okurigana_spacers;].+?)\)/\
                    [\1(\2)]{.spaced-out-rubies}/g" ;  }

blacksanta    : &#127877;&#127999;


<!-- The general case, without spacers: !-->

.rubies { replace :  "/(.+)\(([^&furigana_spacers;&okurigana_spacers;]+?)\)/\
                      [\1[\2]{.ruby-text}]{.base-kanji}/g"  ; }

<!-- Rubies that follow an okurigana spacers are directly rendered, with their "base kanji" as a blank space `&ensp;`. The remaining kanji and furigana that precede the spacer are then sent to the `.rubies` unit and will be parsed from there !-->


.spaced-out-rubies {  replace :  "/(.+?)(.)\((.+)[&furigana_spacers;](.+?)\)/\
                                  [\1(\3)]{.rubies}[\2(\4)]{.rubies}/g"  ; }

.spaced-out-rubies {  replace :  "/(.+?)\((.+)[&okurigana_spacers;](.+?)\)/\
                                  [\1(\2)]{.rubies}[&ensp;[\3]{.ruby-text}]{.base-kanji}/g" ;  }


<!-- Then, rubies spaced out by the furigana spacers are separated into sets of <kanji>(<furigana>). The the final group of furigana is stripped of spacers, coupled with the last kanji, and then is sent back to the .rubies unit to be rendered. The remaning kanji and furigana are grouped together and sent back to .rubies. If there are remaning "spacers" then tey will get sent back here, otherwise will be rendered as kanji with rubies !-->


.base-kanji { html-elem : "ruby"  ;
              tex-cmd   : "\ruby" ; }

.ruby-text {
    html-elem:"rt";
    tex-cmd-before:"}{";
}

@if not rubies_selectable {
                      .rt { -webkit-touch-callout : none  ;
                            -webkit-user-select   : none  ;
                            -khtml-user-select    : none  ;
                            -moz-user-select      : none  ;
                            -ms-user-select       : none  ;
                            user-select           : none  ;  } }


      <!-- Kanji Checker module !-->

joyo_kanji: 亜哀挨愛曖悪握圧扱宛嵐安案暗以衣位囲医依委威為畏胃尉異移萎偉椅彙意違維慰遺緯域育一壱逸茨芋引印因咽姻員院淫陰飲隠韻右宇羽雨唄鬱畝浦運雲永泳英映栄営詠影鋭衛易疫益液駅悦越謁閲円延沿炎宴怨媛援園煙猿遠鉛塩演縁艶汚王凹央応往押旺欧殴桜翁奥横岡屋億憶臆虞乙俺卸音恩温穏下化火加可仮何花佳価果河苛科架夏家荷華菓貨渦過嫁暇禍靴寡歌箇稼課蚊牙瓦我画芽賀雅餓介回灰会快戒改怪拐悔海界皆械絵開階塊楷解潰壊懐諧貝外劾害崖涯街慨蓋該概骸垣柿各角拡革格核殻郭覚較隔閣確獲嚇穫学岳楽額顎掛潟括活喝渇割葛滑褐轄且株釜鎌刈干刊甘汗缶完肝官冠巻看陥乾勘患貫寒喚堪換敢棺款間閑勧寛幹感漢慣管関歓監緩憾還館環簡観韓艦鑑丸含岸岩玩眼頑顔願企伎危机気岐希忌汽奇祈季紀軌既記起飢鬼帰基寄規亀喜幾揮期棋貴棄毀旗器畿輝機騎技宜偽欺義疑儀戯擬犠議菊吉喫詰却客脚逆虐九久及弓丘旧休吸朽臼求究泣急級糾宮救球給嗅窮牛去巨居拒拠挙虚許距魚御漁凶共叫狂京享供協況峡挟狭恐恭胸脅強教郷境橋矯鏡競響驚仰暁業凝曲局極玉巾斤均近金菌勤琴筋僅禁緊錦謹襟吟銀区句苦駆具惧愚空偶遇隅串屈掘窟熊繰君訓勲薫軍郡群兄刑形系径茎係型契計恵啓掲渓経蛍敬景軽傾携継詣慶憬稽憩警鶏芸迎鯨隙劇撃激桁欠穴血決結傑潔月犬件見券肩建研県倹兼剣拳軒健険圏堅検嫌献絹遣権憲賢謙鍵繭顕験懸元幻玄言弦限原現舷減源厳己戸古呼固孤弧股虎故枯個庫湖雇誇鼓錮顧五互午呉後娯悟碁語誤護口工公勾孔功巧広甲交光向后好江考行坑孝抗攻更効幸拘肯侯厚恒洪皇紅荒郊香候校耕航貢降高康控梗黄喉慌港硬絞項溝鉱構綱酵稿興衡鋼講購乞号合拷剛傲豪克告谷刻国黒穀酷獄骨駒込頃今困昆恨根婚混痕紺魂墾懇左佐沙査砂唆差詐鎖座挫才再災妻采砕宰栽彩採済祭斎細菜最裁債催塞歳載際埼在材剤財罪崎作削昨柵索策酢搾錯咲冊札刷刹拶殺察撮擦雑皿三山参桟蚕惨産傘散算酸賛残斬暫士子支止氏仕史司四市矢旨死糸至伺志私使刺始姉枝祉肢姿思指施師恣紙脂視紫詞歯嗣試詩資飼誌雌摯賜諮示字寺次耳自似児事侍治持時滋慈辞磁餌璽鹿式識軸七叱失室疾執湿嫉漆質実芝写社車舎者射捨赦斜煮遮謝邪蛇尺借酌釈爵若弱寂手主守朱取狩首殊珠酒腫種趣寿受呪授需儒樹収囚州舟秀周宗拾秋臭修袖終羞習週就衆集愁酬醜蹴襲十汁充住柔重従渋銃獣縦叔祝宿淑粛縮塾熟出述術俊春瞬旬巡盾准殉純循順準潤遵処初所書庶暑署緒諸女如助序叙徐除小升少召匠床抄肖尚招承昇松沼昭宵将消症祥称笑唱商渉章紹訟勝掌晶焼焦硝粧詔証象傷奨照詳彰障憧衝賞償礁鐘上丈冗条状乗城浄剰常情場畳蒸縄壌嬢錠譲醸色拭食植殖飾触嘱織職辱尻心申伸臣芯身辛侵信津神唇娠振浸真針深紳進森診寝慎新審震薪親人刃仁尽迅甚陣尋腎須図水吹垂炊帥粋衰推酔遂睡穂随髄枢崇数据杉裾寸瀬是井世正生成西声制姓征性青斉政星牲省凄逝清盛婿晴勢聖誠精製誓静請整醒税夕斥石赤昔析席脊隻惜戚責跡積績籍切折拙窃接設雪摂節説舌絶千川仙占先宣専泉浅洗染扇栓旋船戦煎羨腺詮践箋銭潜線遷選薦繊鮮全前善然禅漸膳繕狙阻祖租素措粗組疎訴塑遡礎双壮早争走奏相荘草送倉捜挿桑巣掃曹曽爽窓創喪痩葬装僧想層総遭槽踪操燥霜騒藻造像増憎蔵贈臓即束足促則息捉速側測俗族属賊続卒率存村孫尊損遜他多汰打妥唾堕惰駄太対体耐待怠胎退帯泰堆袋逮替貸隊滞態戴大代台第題滝宅択沢卓拓託濯諾濁但達脱奪棚誰丹旦担単炭胆探淡短嘆端綻誕鍛団男段断弾暖談壇地池知値恥致遅痴稚置緻竹畜逐蓄築秩窒茶着嫡中仲虫沖宙忠抽注昼柱衷酎鋳駐著貯丁弔庁兆町長挑帳張彫眺釣頂鳥朝貼超腸跳徴嘲潮澄調聴懲直勅捗沈珍朕陳賃鎮追椎墜通痛塚漬坪爪鶴低呈廷弟定底抵邸亭貞帝訂庭逓停偵堤提程艇締諦泥的笛摘滴適敵溺迭哲鉄徹撤天典店点展添転塡田伝殿電斗吐妬徒途都渡塗賭土奴努度怒刀冬灯当投豆東到逃倒凍唐島桃討透党悼盗陶塔搭棟湯痘登答等筒統稲踏糖頭謄藤闘騰同洞胴動堂童道働銅導瞳峠匿特得督徳篤毒独読栃凸突届屯豚頓貪鈍曇丼那奈内梨謎鍋南軟難二尼弐匂肉虹日入乳尿任妊忍認寧熱年念捻粘燃悩納能脳農濃把波派破覇馬婆罵拝杯背肺俳配排敗廃輩売倍梅培陪媒買賠白伯拍泊迫剝舶博薄麦漠縛爆箱箸畑肌八鉢発髪伐抜罰閥反半氾犯帆汎伴判坂阪板版班畔般販斑飯搬煩頒範繁藩晩番蛮盤比皮妃否批彼披肥非卑飛疲秘被悲扉費碑罷避尾眉美備微鼻膝肘匹必泌筆姫百氷表俵票評漂標苗秒病描猫品浜貧賓頻敏瓶不夫父付布扶府怖阜附訃負赴浮婦符富普腐敷膚賦譜侮武部舞封風伏服副幅復福腹複覆払沸仏物粉紛雰噴墳憤奮分文聞丙平兵併並柄陛閉塀幣弊蔽餅米壁璧癖別蔑片辺返変偏遍編弁便勉歩保哺捕補舗母募墓慕暮簿方包芳邦奉宝抱放法泡胞俸倣峰砲崩訪報蜂豊飽褒縫亡乏忙坊妨忘防房肪某冒剖紡望傍帽棒貿貌暴膨謀頰北木朴牧睦僕墨撲没勃堀本奔翻凡盆麻摩磨魔毎妹枚昧埋幕膜枕又末抹万満慢漫未味魅岬密蜜脈妙民眠矛務無夢霧娘名命明迷冥盟銘鳴滅免面綿麺茂模毛妄盲耗猛網目黙門紋問冶夜野弥厄役約訳薬躍闇由油喩愉諭輸癒唯友有勇幽悠郵湧猶裕遊雄誘憂融優与予余誉預幼用羊妖洋要容庸揚揺葉陽溶腰様瘍踊窯養擁謡曜抑沃浴欲翌翼拉裸羅来雷頼絡落酪辣乱卵覧濫藍欄吏利里理痢裏履璃離陸立律慄略柳流留竜粒隆硫侶旅虜慮了両良料涼猟陵量僚領寮療瞭糧力緑林厘倫輪隣臨瑠涙累塁類令礼冷励戻例鈴零霊隷齢麗暦歴列劣烈裂恋連廉練錬呂炉賂路露老労弄郎朗浪廊楼漏籠六録麓論和話賄脇惑枠湾腕

preview_kanji_check: False

kanji_check_ignores:龍（）

@if preview_kanji_check and preview {
                            .madoko {  replace : "/([^\u0000-\u33FF&kanji_check_ignores;&joyo_kanji;])/\
                          \/[\1]{color:blue;} /g" ; } 
                                    }



      <!-- ----------------------------------- !-->
      <!-- other general replacements          !-->
      <!-- ----------------------------------- !-->

    <!-- Kaeriten unit. The characters used are the "real" unicode kaeriten chars., but the .kaeriten unit is for making sure they render properly in the preview -->

.kaeriten {css-vertical-align: -0.5em; css-color: red;}

reten         : [㆑]{.kaeriten}
ichiten       : [㆒]{.kaeriten}
niten         : [㆓]{.kaeriten}
santen        : [㆔]{.kaeriten}
ueten         : [㆖]{.kaeriten}
nakaten       : [㆗]{.kaeriten}
shitaten      : [㆘]{.kaeriten}

@if preview {
    .madoko { replace : "/([㆑㆒㆓㆔㆖㆗㆘])/[\1]{.kaeriten}/g"; }  
            }



Sample  { replace : "~ Begin SampleBlock&nl;\
                    ````&nl;&source;&nl;````&nl;\
                    ---- &nl;&source;&nl;\
                    ~ End SampleBlock" }


      <!-- Sanskrit (Skt.), Pali (Pl.), Japanese (Jp.) and Chinese (Ch.) !-->

.madoko { replace : "/((?:Skt)|(?:Pl))\. \
                    ((?:(?:\\\s)|\S)+)/\
                    \1. [\2]{.foreign}/g"  ;

          replace : "/((?:Ch)|(?:Jp))\. \
                    ((?:(?:\\\s)|[^\s])+?)\
                    ([&base_kanji_range;\s\;\)?])/\
                    \1. [\2]{.foreign}\3/g"  ;  }

      <!-- underline up to five lines !-->

.madoko { replace :  "/__(.*?)(\n?)(.*?)(\n?)(.*?)(\n?)(.*?)(\n?)(.*?)__/[\1]{.underline}\2[\3]{.underline}\4[\5]{.underline}\6[\7]{.underline}\8[\9]{.underline}/gm" ; }

      <!-- multi-color highlights; the top line is a multi-line version that doesnt seem to work! //replace : "/!(.+?)((\n.*?)*?)!(b|g|y|o|r|pk)/baby[\1\2]{.\4}/gm" ; -->

.madoko { replace : "/!(.+?)!(b|g|y|o|r|pk)/[\1]{.\2}/g" ;}

      <!--  default highlight; the top line is a multi-line version that doesnt seem to work  //replace : "/!((\n?.+?)*?)!/[\1]{.highlight}/gm" ; !-->

.madoko { replace : "/!(.+?)!/[\1]{.highlight}/gm" ;  }

      <!--  changes single asterix to bold; requires that first and last character are non-spaces  !-->

.madoko { replace : "/\*(\S.*?)((\n.*?\S){0,5})\*/[\1\2]{.bold}/gm"; }

.bold{font-weight:bold; tex-cmd:"\bfseries";}


      <!-- used for parallel translations to take the line heading 【xx】 and making that the paragraph style for that line !-->

parallel-brackets-shortcut: True

@if parallel-brackets-shortcut  {
                        .madoko { replace : "/^【(.*)】(.*$\n(^.+\n)*)/\
                                            ~ begin \1&nl;\
                                            【\1】\2\
                                            ~ end \1&nl;/gm" ; } }

percent_comments: False

@if percent_comments {
              .madoko{  replace : "/\u0025(.*)/<!--\1!-->/g"  ; } }

.foreign  { font-style:italic; }

.underline {  text-decoration : "underline" ;
              tex-cmd         :   "\uline"  ; }

body{ css-font-family:  "&main_font;",
                        "&cjk_main_font;",
                        "&japanese_font;",
                        "&cjkfallback_font;" ; }

BlockQuote {  font-style            : "normal"  ;
              css-background-color  : LightGray ;
              css-line-height       : 1.2 em    ;
              tex-cmd               : "\setlength{\baselineskip}{1.2 em}";  }

      <!-- this needs to be added to `pre` to workaround a bug --->

pre   {  color  : "Black";  }

add_these_commands_to_blockquote_if_it_is_acting_funny {
                    css-line-height : 1;
                    tex-cmd     : "\setlength{\baselineskip}{1.2 em}";  }

japanese {  css-color : blue      ; 
            tex-cmd   : "\jpfont" ; }

.li { css-line-height : 1.2;
      tex-cmd         : "\setlength{\baselineskip}{1.2 em}" ; }

.highlight {  background-color  : &default_highlight_color;; }

.blue, .b   { background-color  : cyan    ; }

.green, .g  { background-color  : lime    ; }

.orange, .o { background-color  : orange  ; }

.yellow, .y {  background-color : yellow  ; }

.red, .r    {  background-color :  red    ; }

.pink, .pk  {  background-color : pink    ; }

.authorname { font-size : medium  }

.authoraddress {  font-size : small ; }

.authoremail {  font-size   : small     ;
                font-family : monospace ; }

.footnote{  tex-cmd: "\setlength{\baselineskip}{1.3 em}"; }

.code { background-color: #EEE          ;
        padding: 0ex 0.2ex 0.1ex 0.2ex  ;
        border-radius: 0.5ex            ; }

dblspace {  css-line-height: 2;
            tex-cmd     : "\setlength{\baselineskip}{2 em}" ;  }

      <!-- originally `tate` was set to `body` rather than as a custom block !-->

tate {  //font-family       : "ＭＳ 明朝" ;
        //line-height       : 4em       ;
        //height            : 30%       ;
        text-align        : left     ;
        right             : 0px       ;
        margin            : 3 em      ;
        -ms-writing-mode  : tb-rl     ;
        -webkit-writing-mode :  vertical-rl ;
        writing-mode      :     vertical-rl ; }

.v {  writing-mode          : vertical-rl ;
      -webkit-writing-mode  : vertical-rl ;
      font-size             : 12px        ; }

.warichu {  display         : inline-table  ;
            vertical-align  : top           ; }

.warichu-left, .warichu-right { font-size :50%        ;
                                display   : table-row ; }

versechars  {  color: &verse_text_color ; }

verse { background-color: &verse_background_color ;  }

CBETA_indents: True
CBETA_linenumbers: True

cbeta {           /*T or an X is the beginning of new line, add a break before it*/
        replace : "/^([TX])(.*\n)/\1\2&nl;/mg";
                  /*deals with the first line of the column */
        replace : "/.*(.{3}[abc])01：(.*)/**\1**: &nl;[\2]{margin-left:1.2em}/g";  }

@if CBETA_linenumbers {
                cbeta { /*deals with numbers for every fifth line (line numbers ending in 0 and 5 */
                        replace : "/.*(.[05])：/[\1:]{margin-left:-1.2em}/g"; }  }

cbeta {            /*gets rid of line numbers for all other lines, currently only works for T and X citations */
        replace : "/[TX].*：//g";  
                   /*full width space in gatha */
        replace : "/ ((.*?[\u4E00-\u9FFF].*?){3,5}) {1,2} ((.*?[\u4E00-\u9FFF].*){3,5})/[　\1　　\3 ]{.versechars}\\/g"
                   /*deals with the parentheses */ 
          replace : "/\(/\(/g"; }

cbetafootnotes  {           /*deals with the footnote anchors */
                  replace : "/\[([^^].*?)\]([\u4E00-\u9FFF])/[\2]{color:red}[^fn-\1]/g";  
                            /*deals with the footnotes */
                  replace : "/\[([^^].*?)\]：/&nl;[^fn-\1]:/g"; 
                            /*deals with the first line of the column */
                  replace : "/.*(.{3}[abc])01：(.*)/**\1**: &br;[\2]{margin-left:1.2em}\\/g";
                            /*deals with numbers for every fifth line*/
                  replace : "/.*(.[05])：(.*)/\1:\2\\/g";  
                            /*gets rid of line numbers for all other lines, and adds line breaks */
                  replace : "/[TX].*：(.*)/[\1]{margin-left:1.2em}\\/g";
                            /*full width space in gatha */
                  replace : "/ ((.*?[\u4E00-\u9FFF].*?){3,5}) {1,2} ((.*?[\u4E00-\u9FFF].*?){3,5})/[　　\1　　　\3 ]{.versechars} /g"
                            /*deals with the parentheses */
                replace : "/\(/\(/g";  }

cbeta_reformatting {            /*for footnote anchors */
                      replace : "/\[([^^].*?)\]([。□\u4E00-\u9FFF])/[\2]{color:red}[^fn-\1]/g"; 
                                /*deals with the footnotes */ 
                      replace : "/\[([^^].*?)\]:/[^fn-\1]:/g";
                                /*for the first line of the column */
                      replace : "/.*(.{3}[abc])01：(.*)/**[<\1>]{background-color:salmon;}**\2\\/g";
                                /*deals with numbers for every fifth line (line numbers ending in 0 and 5 */
                      replace : "/.*(.[05])：(.*)/[\1:]{.pk}\2\\/g"; 
                                /*gets rid of line numbers for all other lines, and adds line breaks currently only works for T and X citations */ 
                      replace : "/[TX].*?：(.*)/\1\\/g";  
                                /*deals with the parentheses */
                      replace : "/\(/\(/g";  
                                /*full width space in gatha */
                      replace : "/([\u4E00-\u9FFF])  ([\u4E00-\u9FFF])/\1　　\2/g"  }

<!-- some fixes for minor problems with the rendering engine, whereby it doesn't insert a space before certain latex tags-->

.dd { }

primer {  replace : "/(.+)/Is the Length of Your String: `\1` \
                      &br;&br;\
                      Which is of legnth:&nl;\
                      ~ begin length &nl;\
                      \1&nl;\
                      ~ end length &nl;\
                      A Prime Number? &br;\
                      ~ begin primecheck &nl;\
                      \1&nl;\
                      ~ end primecheck &nl;/g"; }


length {  replace : "/./   /g";
          replace : "/   $/↓  /";
          replace : "/(.*)/\
                    ```&nl;\
                    \1&nl;\
                    1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \
                    26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \
                    51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 \
                    76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 &nl;\
                    ```&nl;/i"; }


primecheck {  replace : "/./1/g";
              replace : "/^.?$|^(..+?)\1+$/No, and its smallest divisor is &nl;\
                        ~ begin length &nl;\
                        \1&nl;\
                        ~ end length &nl;/g";
              replace : "/^1+/[YES!]{font-size:150%;}/"; }

paralleltrans { replace : "/(.*)/\1 \\/g"; 
                replace : "/\[([^\^])/\[\1/g";  }

mybibl  { font-size : 12pt;
          before    : "# &name-references; {-} &nl;";
          tex-cmd   : "\setlength{\baselineskip}{0.75em}";
          tex-cmd   : "\setlength{\parskip}{0.5em}"; }


.madoko{  replace :  "/([wW])([iI])([lL])([dD])/[[\1]{color: Red}[\2]{color: Blue}[\3]{color: Magenta}[\4]{color: Cyan}]{font-size:125%; font-family:Comic Sans MS;}/g"; }

      <!-- its wild -->

<!-- END:Style -->

<!-- EXPERIMENTAL! Tategaki for madoko--->

<!-- BEGIN:Tategaki -->

Doc Class: [landscape,11pt,a4paper]bxjsarticle

Package: [default]zxjatype


      <!-- japanese article class that workds with zxjatype package. I'm using this because it basically looks better by default, (more natural spacing, kerning) but I'm not totally sure of all it's features. -->

      <!-- Flowframes setup -->

Package: flowfram
Tex Header: \newflowframe{\textheight}{\textwidth}{0pt}{\textheight}[mainframe] 

      <!-- usage: \newflowframe[⟨page list⟩]{⟨width⟩}{⟨height⟩}{⟨x⟩}{⟨y⟩}[⟨label⟩]%* adds a border to the frame for troubleshooting purposes -->

Tex header: \setflowframe{1}{angle=-90} 

      <!-- Font setup -->

Tex header: \setmainfont{&main_font;}

Tex header: \setCJKmainfont[Scale=MatchLowercase,Mapping=tex-text,RawFeature={vertical}]{&cjk_main_font;}

Tex Header: \setCJKmainfont[FallBack,RawFeature={vertical}]{&cjkfallback_font;}


Tex header:\setCJKsansfont[FallBack=&cjkfallback_font;,Scale=MatchLowercase,Mapping=tex-text,RawFeature={vertical}]{&cjk_sans_font;}

Tex header: \newCJKfontfamily\vertical[FallBack=&cjkfallback_font;,Scale=MatchLowercase,Mapping=tex-text,RawFeature={vertical}]{&cjk_sans_font;}

Tex header: \newCJKfontfamily\horizontal[FallBack=&cjkfallback_font;,Scale=MatchLowercase,Mapping=tex-text]{&cjk_main_font;}


      <!-- a thingee to adjust the baseline between chinese and western characters (only a problem with vertical text it seems) in Latex -->

Tex header    : \let\CJKsymbolOrig\CJKsymbol
Tex header    : \let\CJKpunctsymbolOrig\CJKpunctsymbol
Tex header    : \newcommand*\CJKmovesymbol[1]{\raise.35em\hbox{\CJKsymbolOrig{#1}}}
Tex header    : \newcommand*\CJKmovepunctsymbol[1]{\raise.35em\hbox{\CJKpunctsymbolOrig{#1}}}
Tex header    : \newcommand*\CJKmove{\punctstyle{plain}
Tex header    :  \let\CJKsymbol\CJKmovesymbol
Tex header    :  \let\CJKpunctsymbol\CJKmovepunctsymbol}
Tex Doc Header: \CJKmove

<!-- END:Tategaki -->

[TITLE]

[TOC]


Block Elements
====================

Double Spacing
--------------------

- use `~dblspace` custom block for double spacing

Bibliography
--------------------

- use `~mybibl` for a closely typeset bibliography (which also doesn't appear in the TOC)
- Define `name-references` to be the title bibliography. For example `name-references: 参考文献` 

Block Quotes
--------------------

- `blockquotes` using `>` at the beginning of the line are set in single space (by default) but not in the default italic face. 

Parallel Translation
--------------------

- The `paralleltrans` custom block makes lines that are adjacent to one another render with a break between them (normally they would simply concatenate). It also converts any string `[` to `\[` so that the renderer doesn't mistake these for link references (however, actually, this might need to be tweaked, because, what if you want a link?). In fact this isn't strictly speaking necessary, since Madoko just ignores anything in brackets but without a link definition, so more or less, this is just to supress the error message for unlinked text in brackets [like this].

-*this needs to be improved by using a proper multi-line flag; cf. Gyonen document




Inline Elements
====================

- use `.japanese` to apply a japanese font, as opposed to default loaded chinese fonts. May be able to use as a custom block but haven't tried it. If not I should re-write it so that it does that. !I have changed this from `.japanese` to `japanese` which I think will make it work as a custom block but not sure if it will work as an inline style with `[...]{. ---}` syntax.!

Furigana/Rubies (ver. 2.0)
--------------------

The Furigana unit allows for you to type some characters (typically Chinese characters) followed by some other characters (typically hiragana or katakana) surrounded by parentheses (or other delimiter) in order to render what are generally called "rubies" or "furigana. That is, you can type `<chinese characters>(<furigana>)` i.e. typing `漢字\(&lpar;\)かんじ\(&rpar;\)` will give 漢字(かんじ), which will render in HTML as `<ruby>漢字<rt>かんじ</rt></ruby>` and in &logolatex; as `\ruby{漢字}{かんじ}`. This requires loading the `ruby` package for Latex, which is done in this file.[^nb-ruby]

[^nb-ruby]: nb: the `ruby` package apparently isn't set up to work with `xecjk` package, so may not work properly 100&perc; of the time. 



This is achieved by first applying the style `.rubies` to the whole string automatically via a regular expression on the `.madoko` class. By default, the grep pattern detects any string of unicode Kanji characters (i.e. in the range `\u4E00-\u9FFF`), followed by an open parentheses `&lpar;` followed by several Katakana or Hiragana Characters (i.e in the range `\u3040-\u30FF`)  as well as 'spacers' (explained below), and then the closed parentheses `&rpar;`, thus transforming `漢字\(&lpar;\)かんじ\(&rpar;\)` into `[漢字\(&lpar;\)かんじ\(&rpar;\)]{.rubies}`. 

The range of characters detected as the base characters can be set with the metadata key `base_kanji_range`, though this would only be useful if you want to automatically detect non-kanji characters as the base for furigana. The range of characters that is automatically detected as "rubies" can be set similarly with `furigana_range.` By default, this does not include alphanumeric characters, nor does it include kanji, as this would lead to 'false positives' for furigana.[^482] If you did want to automatically detect letters, in addition to Hiragana and Katakana, you would write `furigana_range: \u3040-\u30FFa-zA-Z` in the header. Notice that these must be formatted like a regex range. 

[^482]: For example in the case of dates following names i.e. 織田信長(1534-1582) or parethetical expressions with kanji, i.e. 玄奘(三蔵法師), which should not be rendered as furigana. These situations could also be avoided by using 'full-width' parentheses 織田信長（1534-1582） instead of 'normal' parentheses, but the difference is difficult to see with fixed-width fonts, so may be difficult to troubleshoot.

If you only intent to make an 'unusual' furigana sequence once or twice in your document, then you can also just set the style `.rubies` on any string with furigana demarcated in parentheses. I.e. typing `[🎅(santa&ensp;claus)]{.rubies}` will result in [🎅(santa&ensp;claus)]{.rubies}.[^484]

[^484]: In this case the space `&ensp;` has to be escaped because it would otherwise be detected as a separator. 

You may also change the delimiters used for the furigana detector by setting `ruby_opening_delimiters` and `ruby_closing_delimiters` in the metadata.  For example `ruby_opening_delimiters` is defaulted the open parentheses `\(` (it has to be escaped with a backslash because it is a regex string), but you could also, for example use the "full width" parentheses `（`or perhaps a "black bracket" `【` which may be easier to type while using a Japanese IME. You can actually use more than one delimiter, and mix-and-match between them, but having a standard style for a whole document would be preferred. 


A string of ruby characters enclosed by parentheses or whatever other delimiter you choose, by default will apply as the furigana for a string of base characters stretching back to the next non-base character, or space. Thus, for long strings of kanji, where only some characters require rubies, put a space before the characters to separate furigana characters from the non-furigana characters, e.g. `大陸間 弾道弾\((\)だんどうだん\()\)` renders as 大陸間 弾道弾(だんどうだん). 

In Latex, this may render so that the furigana characters all bunch around the center of the base kanji string.  To avoid this, you can split up the 'blocks' of furigana with a spacer. Thus, we can split `だんどうだん` up into `だん どう だん`, making the above example `弾道弾\((\)だん どう だん\()\)` render as 弾道弾(だん どう だん). This is equivalent to writing`弾\((\)だん)道\((\)どう)弾\((\)だん)` 弾(だん)道(どう)弾(だん), but saves key strokes.  This default delimiter for spacing is the normal space character ` `, but any number of such spacers can also be set with the metadata key `furigana_spacers`, for example, by setting it as the middle dot `・` or a dash `-` (a dash will likely need to backslash-escaped), one could write `だん・どう・だん`, etc. 

Finally, for _okurigana_, characters that come after the base kanji, these can be rendered as 'rubies' by putting a vertical bar `|` before the characters in the base string. For example 三千(さん ぜん|ノ)法門(ほう もん) can be written by `三千\((\)さん ぜん|ノ)法門\((\)ほう もん)`. Notice the `ノ` character is centered over a space character. This function would normally only be useful for rendering _kaeriten_　返り点 or other typesetting used for literary chinese

For rendering in &logolatex; you can set the distance from the ruby with the metadata `rubysep`. 

For the HTML preview, setting `ruby_select` to `false` make is so that rubies are not selected with mouseover (though, apparently in Chrome, they will still be copied). `false` is default, though `true` would probably be considered "normal" behaivior.



Standard Kanji Checker
----------------------
If you set `kanji_check` to `True` in the metadata, it will highlight all non-standard (non-_jōyō_ kanji 常用漢字), based on the list from [this](https://0017.org/339.html) website (also found on [this](https://github.com/rime-aca/character_set?files=1) website). This should only display in the preview, and not in a rendered version. 

For whatever reason, this appears to only affect the body of the text, so if there are problems in the title, it's up to you to fix 'em!

Any string of characters as `kanji_check_ignores` will add it to the list of characters to ignore, and therefore not highlight. (For example, if you intend to use a non-_jōyō_ kanji)





Italicized Foreign Word shortcut
----------------------------------------

- use `pl.`, `skt.`, `ch.`, and `jp.` to get italicized text (i.e. for foreign words). The italicized text should stop when it sees a `.`, `)`, `;`, `\`, or `,`  (so you can use `\/` to break) In the case of `jp.` and `ch.` it will also break at the next kanji character. Not that, for `pl.` and `skt.` the italicization doesn't stop at a space, so you have to explicitly tell it where to end.[^nb-didntwork] eg. skt. dharma, pl. dhamma, ch. fa; jp. hō 法

[^nb-didntwork]: I tried to fix this so you didn't need to explicitly tell it where to end, but it just wouldn't work. 

Shortcut for translation headings
--------------------

- For parallel translations, in particular, ones that use chinese or japanese, you can put a string inside of bold brackets (`【`and`】`) and that word will be applied as the paragraph style for that line. This currently only works for single lines but i'd like to get it to work for multiple lines in the future.

Comments Shortcut
--------------------

- You can use a percent sign (`&perc;`) to comments out anything on a line that appears after the `&perc;` sign. This is enabled by default, and can be disabled by setting `&percent_comments` to `false`. I'm not sure this trick is 100&perc; fool proof (i.e. without bugs or places where it will fuck up. Multi-line comments should use the regular comment feature (because I couldn't get the same thing to work for multi-line replacents).

Underline Shortcut
--------------------

- You can also use enclose text in double underscores `\(&underscore;&underscore;\)<text>\(&underscore;&underscore;\)` to __underline text like this__. This works in Tex with the `ulem` package but maybe I should use the `soul` or `soul-utf8` package. This currently works for up to 5 lines at a time (or maybe it was 4 lines), but I haven't figure out how to get it to work for an arbitrary number of lines yet.

Bold/Italic Emphasis
--------------------

- I have set text enclosed in single asterixes (`\(&ast;\)`) to be *bold* (the default is italics) so you should be able to get bold-italics by typing `\(&underscore;&ast;\)<text>\(&ast;&underscore;\)` like _*this*_.

Highlights
--------------------

### Default highlight

- You can use the property `.highlight` to give text a yellow background, i.e. for highlighting. You can change `.highlight` to be a different default color with the `default_highlight_color` property in the header.

### Default highlight shortcut

- I have also made a global replacement on the `.madoko` property such that surrounding a text (on a single line) with exclamation points `\(&excl;\)`[^nb-exclamation-points] like `\(&excl;\)<text>\(&excl;\)`
 gives the `text` the `.highlight` property. i.e. typing `\(&excl;\)highlight\(&excl;\)` makes !highlight!. 

[^nb-exclamation-points]: This only works with the standard exclamation points `\(&excl;\)` but not CJK "full width" exclamation points to force a unified syntax.

### Multi-color highlights

- I have also set the properties `.blue`, `.green`, `.yellow`, `.orange` `.pink` and `.red` to have [blue]{.blue},[^cyan] [green]{.green}, [yellow]{.yellow}, [orange]{.orange} [pink]{.pink} and [red]{.red} background highlights.
[^cyan]: well, more like "cyan" I guess.

#### Multi-color highlight shortcut

- Similar to the above "default" highlight, I have also made a way to abbreviate this using the same "text surrounded by exclamation points" syntax followed immediately by a "color-definer tag." That is to say type the default `\(&excl;\)highlight\(&excl;\)` combination immidiately followed by a `b`, `g`, `y`, `o`, `r` or `pk` will give (cyan) blue, (lime) green, yellow, orange, red, or pink hightlights. In otherwords, the syntax `\(&excl;\)<text>\(&excl;\)<b|g|y|o|r|pk>`, for example, `\(&excl;\)orange\(&excl;\)o` will give !orange!o as `b` will give !green!b, `y` will give !blue!y, `g` will give !yellow!g, `r` will give !pink!r, and `pk`[^why-pk] will give !red!pk.[^multiple-hightlights] 

[^why-pk]: had to use `pk` because `p` is taken by "paragraph"
[^multiple-hightlights]: Multiple highlights on one line occasionally pose a problem, especially if you try to use the "default" highlight (i.e. without specifying a color) in conjunction with the color-specific highlight. I have yet to figure out a way around this properly, so if you want both yellow and  another color highlight on the same line, you have to be explicit about it. i.e. typing `\(&excl;\)yellow\(&excl;\)y and \(&excl;\)blue\(&excl;\)b`　works (!yellow!y and !blue!b), but `\(&excl;\)default_highlight\(&excl;\) and \(&excl;\)blue\(&excl;\)` (notice the missing `y` color definer) does not work right now. 


Special Characters
=======================

- special characters are `&ditto;` &ditto;, `&excl;` &excl;, `&about;` &about;, and `&approx;` &approx;

- &blacksanta;

Custom Blocks
====================

`Sample`
--------

This is just the `Sample` block copy and pasted from the stylesheet for the Madoko manual. It displays first the raw text, followed by the madoko rendered text. This is usesful for debugging. 

~ begin Sample

~ Sample
It's a sample inside of a sample. So Meta.
~ 

~ end Sample


CBETA
-------

Below is a test of both the `cbeta` and `tate` custom blocks for dealing with raw text from [CBETA]'s online viewer citations:
{font-size:14pt}

[CBETA]:  http://cbetaonline.dila.edu.tw/#/zh/T1851_010

[CBETA] (Chinese Buddhist Electronic Text Association) is an organization based in Taiwan that provides digital versions of many Chinese Buddhist works (and). [SAT] is a similar project based in Japan.

[SAT]:http://21dzk.l.u-tokyo.ac.jp/SAT/

This currently works with "raw" cbeta text, and is especially designed to handle text that retains its original (i.e. as it was originally printed formatting) (i.e. with a limited number of characters per column of text, rather than flowing/reflowing text). Basically, you can keep line numbers at the head of each line in the source text (such as `X40n0726_p0870c21`) as they are displayed in the [cbeta] viewer, but these are hidden in the rendered version by default.

It also automatically reformats the "verse" (jp. _ge_; zh. _ju_ 偈) couplets by indenting them (actually it just adds some whole-width spaces) and spacing the couplets (also with whole-width spaces). It also adds color to the characters, which is set by default in the header of this file, but can be changed by setting `verse_text_color`. I also added a block element called `verse` which simply adds a background color to the block. Again this is set by default in the header of this file, and can be set by `verse_background_color`.

This also automagically changes the cbeta citation format that is output as raw data to a markdown format. However, I still think best practice should be to change the citations to madoko format in the text itself there is a comment above for how to do that with a normal text grep (rather than an automatic grep)!(but I should put that here. and also be sure it works)!.  I also think it will mess up if I try to insert my own footnotes in normal madoko format, but I haven't quite worked out how to fix this yet. (!needs some kind of command like `[^\^]` as part of the regex to ignore text with `^` at the beginning, but that wasn't working so well)!

This basic system should also work with with text from SAT with some tweaking, but haven't tried it yet.

I also want to implement automatic _warichu_ formatting.Also haven't figured out at all how to format the _tategaki_ box it seems as though it will require some tweaking, perhaps with the `.indent` styling?? Not sure. Couldn't get it to work properly earlier. Also yeah, good luck getting this to work with &logolatex; hahahahaha oh cry.



~~ begin cbeta

 《四分律隨機羯磨疏正源記》卷7

X40n0726_p0870c21：[3]聖法。!由此戒法能!成於聖。雖凡夫中受。亦彰此號。隨
X40n0726_p0870c22：具身口為具。能損。損即是破。分成記用。即成善記業
X40n0726_p0870c23：非惡無記也。又此記業。能有力用。故曰記用。感下。如
X40n0726_p0870c24：大鈔。問云今受具戒。招生樂果。為受為隨耶。答受是

X40n0726_p0871a01：緣助。未有行功。必須因隨對境防擬。以此隨行。至得
X40n0726_p0871a02：聖果。不親受體。形俱。一受[c1]已後。終至盡形。即八種無
X40n0726_p0871a03：作。屬形俱無作也。相從。從作戒故。又自能起後隨行
X40n0726_p0871a04：故。所以成善記業也。若據多論。通四心得戒。故彼問
X40n0726_p0871a05：曰。為善心中得戒。為不善心中。為無記心中。為無心
X40n0726_p0871a06：中得戒耶。答曰一切盡得。先以善心。禮僧足[c2]已。受衣
X40n0726_p0871a07：鉢。求和尚。問清淨[c3]已受戒。互跪合掌。白四羯磨[c4]已。相
X40n0726_p0871a08：續善心戒色成就。是謂善心中得戒。若先次第法中。
X40n0726_p0871a09：常行善心。起諸教業。白四羯磨時。或起貪欲瞋恚等
X40n0726_p0871a10：諸不善念。於此心中成就戒色。是名不善心得戒也。
X40n0726_p0871a11：以本善心善教力故。而得此戒。非不善心力也。先以
X40n0726_p0871a12：善心起於教業。白四羯磨時。或睡或眠。或於眠心而
X40n0726_p0871a13：得戒色。是名無記心中而得戒也。先以善心起於教
X40n0726_p0871a14：業。白四羯磨時。入滅盡定。即於爾時成就戒色。是名
X40n0726_p0871a15：無心中而得戒也。彼論雖通後三心。皆由前有善記
X40n0726_p0871a16：業故。通感發也。如律。指十誦也。是色。屬善色也。 
X40n0726_p0871a17：諸塵。即上依身口成。不離色等塵也。對說。即不可見
X40n0726_p0871a18：無對說也。雖下。雖曰多引明證。及所顯二戒。俱是色
X40n0726_p0871a19：也。中陰。死生二有中。其色微細故。豈約塵對。言塵對
X40n0726_p0871a20：則塵麤故。顯此是細色也。諸師橫判。如上所出者是
X40n0726_p0871a21：也。意言如此。言其戒體色量。意云如中陰色也。 
X40n0726_p0871a22：別者。意謂何以作戒是色。無作非色者。分通大乘。有
X40n0726_p0871a23：施生成佛等義故。業下。善惡等業。若無心者。不成業
X40n0726_p0871a24：也。故下。前有門論。[c5]但約色為作戒體。今加於心。故得

(CBETA, X40, no. 726, p. 870, c20-p. 871, b4)

[3]：會本疏卷三之五[c1]：【卍續】巳 [c2]：【卍續】巳 [c3]：【卍續】巳 [c4]：【卍續】巳 [c5]：【卍續】伹


~~ end cbeta



```
for body text:
find: \[(.+?)\](.)
replace: $2[^fn-$1]
```

%slightly modified so i'm not sure it works 100%

```
for footnotes:
find: \[([^\[]+?)\]:
replace: [^fn-$1]:
```


Prime Number Checker Module
---------------------------

This is an implementation of the Regex prime number checker code that I found online. The original implmentation was basically the following:

> Please type a string of characters below the line `~ primer` to check the legnth of the string is Prime:

Followed by the lines:

```
~ primer
(any string of characters goes here)
~
```

This module is made up of three classes: `primer` `length` and `primecheck`. The `primer` class simply prints the given input with some explanatory text and then feeds the input into `length` and `primecheck`. `legnth` prints a chart of the legnth of the string that it is given, while `primecheck` is what actually checks if the string is prime or not.  `primecheck` first converts the string to a string of `1`s (i.e. a number in unary, whereby the number of ones, that is, the length of the string, is the number to be checked), and then compares that string against the Regular Expression`^.?$|^(..+?)\1+$`. This Regex actually checks that a number is *not* prime, rather than if it is prime, so if the legnth of the input string it is *not* prime, `primecheck` prints a statement says so, and then feeds the regex group `\1`, which is the string of the legnths of the smallest factor, into `length` to displays a chart giving the smallest factor. Otherwise, if the length of the string *is* prime, then it prints a statement saying as much. Anyway, it works like this:

~ primer
12345
~
----------------------------------
~ primer
123456
~
----------------------------------
Note that while the actual prime-checking regex requires a string of all the same characters, `primecheck` automatically converts any string to such a string. Also note that, while this will technically work with a string of any legnth, the chart for `length` only goes up to 100, and probably strings longer than that may be umm... a bit tough on this poor little regex.